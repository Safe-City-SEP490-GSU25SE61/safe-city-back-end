// <auto-generated />
using System;
using DataAccessLayer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250807054306_UpdateEscortJourneyGroup")]
    partial class UpdateEscortJourneyGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text")
                        .HasColumnName("activation_code");

                    b.Property<DateTime?>("CodeExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("code_expiry");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("commune_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsBiometricEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_biometric_enabled");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_logged_in");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry");

                    b.Property<int>("ReputationPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("reputation_point");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_status");

                    b.Property<int>("TotalPoint")
                        .HasColumnType("integer")
                        .HasColumnName("total_point");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("CommuneId");

                    b.HasIndex("RoleId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("BusinessObject.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("benefit");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("MinPoint")
                        .HasColumnType("integer")
                        .HasColumnName("min_point");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("achievement");
                });

            modelBuilder.Entity("BusinessObject.Models.AssignOfficerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<int?>("NewCommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("new_district_id");

                    b.Property<int?>("OldCommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("old_district_id");

                    b.HasKey("Id");

                    b.ToTable("assign_officer_history");
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<int>("CommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("commune_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<bool>("Pinned")
                        .HasColumnType("boolean")
                        .HasColumnName("pinned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommuneId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "GIN");

                    b.HasIndex("Type");

                    b.HasIndex("IsVisible", "IsApproved");

                    b.ToTable("blog");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer")
                        .HasColumnName("blog_id");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liked_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId", "BlogId")
                        .IsUnique();

                    b.ToTable("blog_like");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer")
                        .HasColumnName("blog_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_data");

                    b.Property<int>("MediaSlot")
                        .HasColumnType("integer")
                        .HasColumnName("media_slot");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("blog_media");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogModeration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer")
                        .HasColumnName("blog_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<bool>("NoAntiState")
                        .HasColumnType("boolean")
                        .HasColumnName("no_anti_state");

                    b.Property<bool>("Politeness")
                        .HasColumnType("boolean")
                        .HasColumnName("politeness");

                    b.Property<bool>("PositiveMeaning")
                        .HasColumnType("boolean")
                        .HasColumnName("positive_meaning");

                    b.Property<string>("Reasoning")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reasoning");

                    b.Property<bool>("TypeRequirement")
                        .HasColumnType("boolean")
                        .HasColumnName("type_requirement");

                    b.Property<string>("ViolationsJson")
                        .HasColumnType("text")
                        .HasColumnName("violations");

                    b.HasKey("Id");

                    b.HasIndex("BlogId")
                        .IsUnique();

                    b.ToTable("blog_moderation");
                });

            modelBuilder.Entity("BusinessObject.Models.CitizenIdentityCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("BackImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("back_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<string>("FrontImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("front_image_url");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_number");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_date");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place_of_birth");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place_of_issue");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("citizen_identity_card");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_flagged");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("BusinessObject.Models.Commune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("PolygonData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("polygon_data");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("integer")
                        .HasColumnName("province_id");

                    b.Property<int>("TotalReportedIncidents")
                        .HasColumnType("integer")
                        .HasColumnName("total_reported_incidents");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("commune");
                });

            modelBuilder.Entity("BusinessObject.Models.CurrentUserLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatteryLevel")
                        .HasColumnType("integer")
                        .HasColumnName("battery_level");

                    b.Property<int>("EscortJourneyId")
                        .HasColumnType("integer")
                        .HasColumnName("escort_journey_id");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("heading");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("numeric")
                        .HasColumnName("speed");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EscortJourneyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("current_user_location");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortGroupJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId", "AccountId")
                        .IsUnique();

                    b.ToTable("escort_group_join_request");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_time");

                    b.Property<int?>("CreatedInGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("created_in_group_id");

                    b.Property<bool>("DeviationAlertSent")
                        .HasColumnType("boolean")
                        .HasColumnName("deviation_alert_sent");

                    b.Property<decimal?>("EndLatitude")
                        .HasColumnType("numeric")
                        .HasColumnName("end_latitude");

                    b.Property<decimal?>("EndLongitude")
                        .HasColumnType("numeric")
                        .HasColumnName("end_longitude");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end_point");

                    b.Property<DateTime?>("ExpectedEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_time");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_time");

                    b.Property<decimal?>("StartLatitude")
                        .HasColumnType("numeric")
                        .HasColumnName("start_latitude");

                    b.Property<decimal?>("StartLongitude")
                        .HasColumnType("numeric")
                        .HasColumnName("start_longitude");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("start_point");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedInGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("escort_journey");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_code");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("leader_id");

                    b.Property<string>("MaxMemberNumber")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasColumnName("max_member_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GroupCode")
                        .IsUnique();

                    b.HasIndex("LeaderId");

                    b.ToTable("escort_journey_group");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyGroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_online");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId", "AccountId")
                        .IsUnique();

                    b.ToTable("escort_journey_group_member");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyWatcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<int>("EscortJourneyId")
                        .HasColumnType("integer")
                        .HasColumnName("escort_journey_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("WatcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("watcher_id");

                    b.HasKey("Id");

                    b.HasIndex("WatcherId");

                    b.HasIndex("EscortJourneyId", "WatcherId")
                        .IsUnique();

                    b.ToTable("escort_journey_watcher");
                });

            modelBuilder.Entity("BusinessObject.Models.IncidentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("commune_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EnvironmentSubCategory")
                        .HasColumnType("text")
                        .HasColumnName("environment_sub_category");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("text")
                        .HasColumnName("image_urls");

                    b.Property<string>("InfrastructureSubCategory")
                        .HasColumnType("text")
                        .HasColumnName("infrastructure_sub_category");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("numeric")
                        .HasColumnName("lat");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("numeric")
                        .HasColumnName("lng");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("OtherSubCategory")
                        .HasColumnType("text")
                        .HasColumnName("other_sub_category");

                    b.Property<string>("PriorityLevel")
                        .HasColumnType("text")
                        .HasColumnName("priority_level");

                    b.Property<string>("SecuritySubCategory")
                        .HasColumnType("text")
                        .HasColumnName("security_sub_category");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text")
                        .HasColumnName("status_message");

                    b.Property<string>("TrafficSubCategory")
                        .HasColumnType("text")
                        .HasColumnName("traffic_sub_category");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_by");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("UserId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("incident_report");
                });

            modelBuilder.Entity("BusinessObject.Models.LocationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("EscortJourneyId")
                        .HasColumnType("integer")
                        .HasColumnName("escort_journey_id");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorded_at");

                    b.HasKey("Id");

                    b.HasIndex("EscortJourneyId");

                    b.ToTable("location_history");
                });

            modelBuilder.Entity("BusinessObject.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uuid")
                        .HasColumnName("officer_id");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_id");

                    b.HasKey("Id");

                    b.HasIndex("OfficerId");

                    b.HasIndex("ReportId");

                    b.ToTable("note");
                });

            modelBuilder.Entity("BusinessObject.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_days");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("package");
                });

            modelBuilder.Entity("BusinessObject.Models.PackageChangeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("field_name");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.HasKey("Id");

                    b.ToTable("package_change_history");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subcription_id");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_code");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("BusinessObject.Models.PayosTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeeplinkUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deep_link_url");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exprired_at");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_code");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qr_code_url");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("WebhookReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("webhook_received_at");

                    b.HasKey("Id");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("payos_transaction");
                });

            modelBuilder.Entity("BusinessObject.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.ToTable("province");
                });

            modelBuilder.Entity("BusinessObject.Models.ReputationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_type");

                    b.HasKey("Id");

                    b.ToTable("reputation_event");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("BusinessObject.Models.SosAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EscortJourneyId")
                        .HasColumnType("integer")
                        .HasColumnName("escort_journey_id");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric")
                        .HasColumnName("lat");

                    b.Property<decimal>("Lng")
                        .HasColumnType("numeric")
                        .HasColumnName("lng");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("EscortJourneyId");

                    b.HasIndex("SenderId");

                    b.ToTable("sos_alert");
                });

            modelBuilder.Entity("BusinessObject.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.HasOne("BusinessObject.Models.Achievement", "Achievement")
                        .WithMany("Accounts")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BusinessObject.Models.Commune", "Commune")
                        .WithMany("Accounts")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BusinessObject.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Commune");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Commune", "Commune")
                        .WithMany("Blogs")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogLike", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithMany("BlogLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogMedia", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "Blog")
                        .WithMany("Media")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BusinessObject.Models.BlogModeration", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "Blog")
                        .WithOne("Moderation")
                        .HasForeignKey("BusinessObject.Models.BlogModeration", "BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("BusinessObject.Models.CitizenIdentityCard", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithOne("CitizenIdentityCard")
                        .HasForeignKey("BusinessObject.Models.CitizenIdentityCard", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Commune", b =>
                {
                    b.HasOne("BusinessObject.Models.Province", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BusinessObject.Models.CurrentUserLocation", b =>
                {
                    b.HasOne("BusinessObject.Models.EscortJourney", "EscortJourney")
                        .WithMany("CurrentUserLocations")
                        .HasForeignKey("EscortJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithOne("CurrentLocation")
                        .HasForeignKey("BusinessObject.Models.CurrentUserLocation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscortJourney");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortGroupJoinRequest", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("GroupJoinRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.EscortJourneyGroup", "Group")
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourney", b =>
                {
                    b.HasOne("BusinessObject.Models.EscortJourneyGroup", "CreatedInGroup")
                        .WithMany("Journeys")
                        .HasForeignKey("CreatedInGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithMany("CreatedEscortJourneys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedInGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyGroup", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Leader")
                        .WithMany("LedEscortGroups")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyGroupMember", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("JoinedEscortGroups")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.EscortJourneyGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyWatcher", b =>
                {
                    b.HasOne("BusinessObject.Models.EscortJourney", "EscortJourney")
                        .WithMany("Watchers")
                        .HasForeignKey("EscortJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "Watcher")
                        .WithMany("WatchedJourneys")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscortJourney");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("BusinessObject.Models.IncidentReport", b =>
                {
                    b.HasOne("BusinessObject.Models.Commune", "Commune")
                        .WithMany("IncidentReports")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithMany("IncidentReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "Verifier")
                        .WithMany("VerifiedIncidentReports")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Commune");

                    b.Navigation("User");

                    b.Navigation("Verifier");
                });

            modelBuilder.Entity("BusinessObject.Models.LocationHistory", b =>
                {
                    b.HasOne("BusinessObject.Models.EscortJourney", "EscortJourney")
                        .WithMany("LocationHistories")
                        .HasForeignKey("EscortJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscortJourney");
                });

            modelBuilder.Entity("BusinessObject.Models.Note", b =>
                {
                    b.HasOne("BusinessObject.Models.Account", "Officer")
                        .WithMany("Notes")
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.IncidentReport", "Report")
                        .WithMany("Notes")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Officer");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.HasOne("BusinessObject.Models.Subscription", "Subscription")
                        .WithOne("Payment")
                        .HasForeignKey("BusinessObject.Models.Payment", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.PayosTransaction", b =>
                {
                    b.HasOne("BusinessObject.Models.Payment", "Payment")
                        .WithOne("PayosTransaction")
                        .HasForeignKey("BusinessObject.Models.PayosTransaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObject.Models.SosAlert", b =>
                {
                    b.HasOne("BusinessObject.Models.EscortJourney", "EscortJourney")
                        .WithMany("SosAlerts")
                        .HasForeignKey("EscortJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "Sender")
                        .WithMany("SosAlerts")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscortJourney");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BusinessObject.Models.Subscription", b =>
                {
                    b.HasOne("BusinessObject.Models.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Models.Account", "Account")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("BusinessObject.Models.Account", b =>
                {
                    b.Navigation("BlogLikes");

                    b.Navigation("Blogs");

                    b.Navigation("CitizenIdentityCard");

                    b.Navigation("Comments");

                    b.Navigation("CreatedEscortJourneys");

                    b.Navigation("CurrentLocation")
                        .IsRequired();

                    b.Navigation("GroupJoinRequests");

                    b.Navigation("IncidentReports");

                    b.Navigation("JoinedEscortGroups");

                    b.Navigation("LedEscortGroups");

                    b.Navigation("Notes");

                    b.Navigation("Payments");

                    b.Navigation("SosAlerts");

                    b.Navigation("Subscriptions");

                    b.Navigation("VerifiedIncidentReports");

                    b.Navigation("WatchedJourneys");
                });

            modelBuilder.Entity("BusinessObject.Models.Achievement", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Media");

                    b.Navigation("Moderation")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Commune", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Blogs");

                    b.Navigation("IncidentReports");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourney", b =>
                {
                    b.Navigation("CurrentUserLocations");

                    b.Navigation("LocationHistories");

                    b.Navigation("SosAlerts");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("BusinessObject.Models.EscortJourneyGroup", b =>
                {
                    b.Navigation("JoinRequests");

                    b.Navigation("Journeys");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("BusinessObject.Models.IncidentReport", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("BusinessObject.Models.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.Navigation("PayosTransaction")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Models.Province", b =>
                {
                    b.Navigation("Communes");
                });

            modelBuilder.Entity("BusinessObject.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Models.Subscription", b =>
                {
                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
